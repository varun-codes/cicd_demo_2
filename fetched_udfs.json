{
    "8402": {
        "args": [],
        "code": "\t# Import Python packages\n\timport json\n\timport re\n\t\n\t# Split the document text by newline characters\n\ttext_split = context['document_text'].split(\"\\n\")\n\t\n\t# Filter lines containing the filler character '<' and with a length of at least 44 characters\n\tfiller_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\")[:44] for x in text_split if \"<\" in x and len(x.replace(\" \", \"\")) >= 44]\n\t))\n\t\n\t# Filter lines with exactly 44 characters after removing spaces\n\tnum_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\") for x in text_split if len(x.replace(\" \", \"\")) == 44]\n\t))\n\t\n\t# Initialize MRZ string\n\tmrz_str = \"\"\n\t\n\t# Check conditions to assign MRZ string\n\tif len(filler_char_filter) == 2:\n\t    mrz_str = \"\".join(filler_char_filter)\n\telif len(num_char_filter) == 2:\n\t    mrz_str = \"\".join(num_char_filter)\n\telse:\n\t    mrz_str = \"Unable to read MRZ\"\n\t\n\t# Return the desired output\n\treturn mrz_str\n\t",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:8369632445:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208644000",
        "name": "extract_MRZ",
        "udf_type": "REFINER"
    },
    "8403": {
        "args": [
            {
                "data_type": "LINE",
                "name": "previous_line",
                "value": "Date Of Issue@0"
            }
        ],
        "code": "\tif previous_line:\n\t  previous_line = previous_line.lower()\n\t  previous_line = previous_line.replace(\"date\",\"\").replace(\"of\",\"\").replace(\"issue\",\"\").replace(\".\",\" \")\n\t  return previous_line.upper()\n\telse:\n\t  return 'N/A'",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:8988432900:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208645000",
        "name": "remove_unwanted_chars",
        "udf_type": "REFINER"
    },
    "8404": {
        "args": [
            {
                "data_type": "LINE",
                "name": "previous_line",
                "value": "Date Of Expiry@0"
            }
        ],
        "code": "\tif previous_line:\n\t  return previous_line.replace(\".\",\" \").lower()\n\telse:\n\t  return 'N/A'",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:1143505038:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208645000",
        "name": "remove_unwanted_chars",
        "udf_type": "REFINER"
    },
    "8405": {
        "args": [
            {
                "data_type": "LINE",
                "name": "previous_line",
                "value": "Place Of Birth@0"
            }
        ],
        "code": "\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:1499318114:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208645000",
        "name": "format_result",
        "udf_type": "REFINER"
    },
    "8406": {
        "args": [
            {
                "data_type": "LINE",
                "name": "previous_line",
                "value": "Issuing Authority@0"
            }
        ],
        "code": "\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:2127087028:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208645000",
        "name": "format_result",
        "udf_type": "REFINER"
    },
    "8407": {
        "args": [
            {
                "data_type": "FIELD",
                "name": "MRZ",
                "value": "MRZ"
            }
        ],
        "code": "\t\n\tif len(MRZ) == 88:\n\t\t\treturn None\n\telse:\n\t\t\treturn \"Error: Wrong MRZ\"",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:2253839819:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744208647000",
        "name": "validate_MRZ",
        "udf_type": "VALIDATIONS"
    },
    "8408": {
        "args": [
            {
                "data_type": "FIELD",
                "name": "Nationality",
                "value": "Nationality"
            },
            {
                "data_type": "FIELD",
                "name": "Passport_Number",
                "value": "Passport Number"
            }
        ],
        "code": "    import re\n    if Nationality == 'INDIA':\n        if not Passport_Number or not re.fullmatch('\\\\d+', Passport_Number):\n            return 'Passport Number should be an integer value if Nationality is INDIA'\n    return None",
        "docstring": "    Validates that 'Passport Number' should be an integer value if 'Nationality' is INDIA.\n\n    Args:\n    Nationality (str): The nationality of the individual.\n    Passport_Number (str): The passport number of the individual.\n    context (optional): Additional context, default is None.\n    **kwargs: Additional keyword arguments.\n\n    Returns:\n    str: Specific and relevant error message if validation fails, otherwise None.",
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:8541383230:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744209049000",
        "name": "validate_passport_number",
        "udf_type": "VALIDATIONS"
    },
    "8409": {
        "args": [
            {
                "data_type": "FIELD",
                "name": "Nationality",
                "value": "Nationality"
            },
            {
                "data_type": "FIELD",
                "name": "Passport_Number",
                "value": "Passport Number"
            }
        ],
        "code": "    if Nationality == 'INDIA':\n        if not isinstance(Passport_Number, (int, float)) or isinstance(Passport_Number, bool) or int(Passport_Number) != Passport_Number:\n            return 'Passport Number should be an integer value if Nationality is INDIA'\n    return None",
        "docstring": "    Validates that 'Passport Number' should be an integer value if 'Nationality' is INDIA.\n\n    Args:\n    Nationality (str): The nationality of the individual.\n    Passport_Number (any): The passport number of the individual.\n    context (optional): Additional context, defaults to None.\n    **kwargs: Additional keyword arguments.\n\n    Returns:\n    str: Specific and relevant error message if validation fails, otherwise None.",
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:8961503473:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744209112000",
        "name": "validate_passport_number",
        "udf_type": "VALIDATIONS"
    },
    "8410": {
        "args": [
            {
                "data_type": "FIELD",
                "name": "Passport_Number",
                "value": "Passport Number"
            },
            {
                "data_type": "FIELD",
                "name": "Date_Of_Birth",
                "value": "Date Of Birth"
            },
            {
                "data_type": "FIELD",
                "name": "Gender",
                "value": "Gender"
            },
            {
                "data_type": "FIELD",
                "name": "Nationality",
                "value": "Nationality"
            }
        ],
        "code": "\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\tif Gender:\n\t\treturn \"Error: Gender found\"\n\t\t# Return None to indicate validation passed\n\t\treturn None\n\telse:\n\t\t# Return a string to indicate validation failed\n\t\treturn \"Error: Passport_Number is empty\"",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:9718369061:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744209248000",
        "name": "validate_passport_number",
        "udf_type": "VALIDATIONS"
    },
    "8536": {
        "args": [
            {
                "data_type": "FIELD",
                "name": "Passport_Number",
                "value": "Passport Number"
            }
        ],
        "code": "\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\tif Passport_Number:\n\t\t# Return None to indicate validation passed\n\t\treturn None\n\telse:\n\t\t# Return a string to indicate validation failed\n\t\treturn \"Error: Passport_Number is empty\"",
        "docstring": null,
        "lambda_end_of_life": null,
        "lambda_id": "11",
        "lambda_udf_id": "v1:AWS_LAMBDA:1502679453:insaprd-use2-aihub-prd-docker-default-udf:10",
        "last_updated_at": "1744777932000",
        "name": "unnamed_custom_function",
        "udf_type": "VALIDATIONS"
    }
}