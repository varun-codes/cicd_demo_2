{
    "project_data": {
        "activeDeployedSolutionId": "94e05498-d911-4cf4-a88e-99a54687cfbc",
        "createdAtMs": "1744208642000",
        "creationBase": "NONE",
        "dataMountPath": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2",
        "description": "Sample Project",
        "extractionMode": "CLASSIFICATION",
        "id": "01961aef-c063-717c-999c-98e956d8bff2",
        "llm": "gpt-3.5-turbo",
        "name": "CICD Demo Build Project",
        "owner": "92f4f85a-e5b3-4658-8323-ce9310c5be2a",
        "ownerPublicId": "varun_nandan",
        "projectMountPath": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2",
        "repoId": "0eb809ca-a991-4fe2-b9c7-1804509a08a2",
        "schemaVersion": "1",
        "settings": {},
        "type": "BUILD",
        "updatedAtMs": "1744777961000",
        "workspace": "varun_nandan"
    },
    "project_schema": {
        "Other": {
            "class_id": "170931",
            "description": "",
            "fields": []
        },
        "Passport": {
            "class_id": "170930",
            "description": "default Passport Document class",
            "fields": [
                {
                    "data_type": "TEXT",
                    "description": "Return the \"first name\" or \"given names\" of the person for whom the passport is issued. Include \"middle name\" from middle name column if exists, it is mentioned below given name. Given name may or may not include two or more names. If it is in a single line the \"last\" word is the surname or mentioned below it.",
                    "field_id": "529463",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Given Name",
                    "position": 2,
                    "prompt": "Given Name",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "Mostly surname is mentioned above given name. If it is in a single line the \"last\" word is the surname or mentioned below it. It can include two or more words.",
                    "field_id": "529464",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Surname",
                    "position": 4,
                    "prompt": "Surname",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "string return date of birth in mm/dd/yyyy format",
                    "field_id": "529465",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Date Of Birth",
                    "position": 3,
                    "prompt": "Date Of Birth",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "return the nationality of person whose passport this is. the data under the column \"Nationality\". the data column will after \"name\"",
                    "field_id": "529466",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Nationality",
                    "position": 6,
                    "prompt": "Nationality",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "The data under the column \"Passport Number\". The data will be always include alphabet and numbers. It will never be more than 9 characters and will never include special character.",
                    "field_id": "529467",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Passport Number",
                    "position": 0,
                    "prompt": "Passport Number",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "given under the column of \"gender\" or \"sex\" and options are \"M\" or \"F\"",
                    "field_id": "529468",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Gender",
                    "position": 5,
                    "prompt": "Gender",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "Passport type of the passport and return P if nothing is mentioned, usually mentioned under \"type\".",
                    "field_id": "529469",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Passport Type",
                    "position": 1,
                    "prompt": "Passport Type",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "string return the country that issued the passport. The data is against the column \"country code\". The data will have 3 english alphabet only.",
                    "field_id": "529470",
                    "lines": [],
                    "model_type": "DEFAULT",
                    "name": "Issuing Country",
                    "position": 7,
                    "prompt": "Issuing Country",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "",
                    "field_id": "529471",
                    "lines": [
                        {
                            "function_args": [],
                            "function_id": 8402,
                            "line_type": "UDF",
                            "native_fn_name": null,
                            "prompt": null
                        }
                    ],
                    "model_type": "DEFAULT",
                    "name": "MRZ",
                    "position": 8,
                    "prompt": "",
                    "prompt_schema": null,
                    "prompt_type": "udf"
                },
                {
                    "data_type": "TEXT",
                    "description": "You are expert in document processing with a focus on extracting critical information from passports. Your task is to extract the value associated with \"Date of Issue\" in the format present in the document as it is which specifies when the passport was officially issued.\nNote :\n1) Do not consider \"Date of Issue\" from old passport number.\n2) Ignore any variations such as \"Issue date\", \"Date Issue\", \"RP Issue date\" etc.\n3) If the \"Date of issue\" cannot be found, return N/A.",
                    "field_id": "529472",
                    "lines": [
                        {
                            "function_args": [
                                {
                                    "data_type": "LINE",
                                    "name": "previous_line",
                                    "value": "Date Of Issue@0"
                                }
                            ],
                            "function_id": 8403,
                            "line_type": "UDF",
                            "native_fn_name": null,
                            "prompt": null
                        },
                        {
                            "function_args": [],
                            "function_id": null,
                            "line_type": "PROMPT",
                            "native_fn_name": null,
                            "prompt": "Step-1 : If the extracted value is 'N/A' or empty, return 'N/A'.\n\nStep-2 : If the extracted value does not contain 3 parts, then return the extracted value as it is.\n\nStep-3 : Otherwise, Maintain the extracted date format as it is, but just convert the month (second part in the extracted date) to English format.\n\nStep-4 : Make sure the month(second part in the date) appears only once in the extracted date.\n\nLet's think step by step"
                        },
                        {
                            "function_args": [
                                {
                                    "data_type": "TEXT",
                                    "name": "input__format",
                                    "value": "\"\""
                                },
                                {
                                    "data_type": "TEXT",
                                    "name": "output__format",
                                    "value": "\"mmddyyyy\""
                                }
                            ],
                            "function_id": null,
                            "line_type": "NATIVE",
                            "native_fn_name": "format_date",
                            "prompt": null
                        }
                    ],
                    "model_type": "ADVANCED",
                    "name": "Date Of Issue",
                    "position": 9,
                    "prompt": "Date Of Issue",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "Your task is to only look for the keyword \"Date of Expiry\" within the document. Extract the date in the same format as it appears next to or near this phrase. \n\nNote :\n1) Ignore any variations like 'RP expiry date' or other similar terms.\n2) If the 'Date of Expiry' cannot be found, return 'N/A'.",
                    "field_id": "529473",
                    "lines": [
                        {
                            "function_args": [
                                {
                                    "data_type": "LINE",
                                    "name": "previous_line",
                                    "value": "Date Of Expiry@0"
                                }
                            ],
                            "function_id": 8404,
                            "line_type": "UDF",
                            "native_fn_name": null,
                            "prompt": null
                        },
                        {
                            "function_args": [],
                            "function_id": null,
                            "line_type": "PROMPT",
                            "native_fn_name": null,
                            "prompt": "Step-1 : If the extracted value is 'N/A' or empty, return 'N/A'.\n\nStep-2 : If the extracted value does not contain 3 parts, then return the extracted value as it is.\n\nStep-3 : Otherwise, Maintain the extracted date format as it is, but just convert the month (second part in the extracted date) to English format.\n\nStep-4 : Make sure the month(second part in the date) appears only once in the extracted date.\n\nLet's think step by step"
                        },
                        {
                            "function_args": [
                                {
                                    "data_type": "TEXT",
                                    "name": "input__format",
                                    "value": "\"\""
                                },
                                {
                                    "data_type": "TEXT",
                                    "name": "output__format",
                                    "value": "\"mmddyyyy\""
                                }
                            ],
                            "function_id": null,
                            "line_type": "NATIVE",
                            "native_fn_name": "format_date",
                            "prompt": null
                        }
                    ],
                    "model_type": "ADVANCED",
                    "name": "Date Of Expiry",
                    "position": 10,
                    "prompt": "Date Of Expiry",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                },
                {
                    "data_type": "TEXT",
                    "description": "You are expert in document processing with a focus on extracting critical information from passports. Your task is to extract the complete value for 'Place of Birth' in the format as it is and just return the value associated without any extra text.  \n\nSometimes alphabetical value for 'Place of birth' will appear after the gender(Male-M / Female-F) on passport. \n\nIf 'Place of Birth' is not found, return 'N/A.'",
                    "field_id": "529474",
                    "lines": [
                        {
                            "function_args": [
                                {
                                    "data_type": "LINE",
                                    "name": "previous_line",
                                    "value": "Place Of Birth@0"
                                }
                            ],
                            "function_id": 8405,
                            "line_type": "UDF",
                            "native_fn_name": null,
                            "prompt": null
                        }
                    ],
                    "model_type": "ADVANCED",
                    "name": "Place Of Birth",
                    "position": 11,
                    "prompt": "You are expert in document processing with a focus on extracting critical information from passports. Your task is to extract the complete value for 'Place of Birth' in the format as it is and just return the value associated without any extra text.  \n\nSometimes alphabetical value for 'Place of birth' will appear after the gender(Male-M / Female-F) on passport. \n\nIf 'Place of Birth' is not found, return 'N/A.'",
                    "prompt_schema": null,
                    "prompt_type": "advanced"
                },
                {
                    "data_type": "TEXT",
                    "description": "You are expert in document processing with a focus on extracting critical information from passports.\n\nYour task is to extract the complete value for 'Issuing Authority' from the passport which is near to \"Date Of Issue\" as it is which specifies who issued the Passport.\n\nPlease make sure you should not extract the value under \"Place Of Issue\" or \"Issuing Office\" or \"Office\".\n\nNote :  If it is not found, return 'N/A'.",
                    "field_id": "529475",
                    "lines": [
                        {
                            "function_args": [
                                {
                                    "data_type": "LINE",
                                    "name": "previous_line",
                                    "value": "Issuing Authority@0"
                                }
                            ],
                            "function_id": 8406,
                            "line_type": "UDF",
                            "native_fn_name": null,
                            "prompt": null
                        }
                    ],
                    "model_type": "ADVANCED",
                    "name": "Issuing Authority",
                    "position": 12,
                    "prompt": "Issuing Authority",
                    "prompt_schema": null,
                    "prompt_type": "basic"
                }
            ]
        }
    },
    "project_udfs": {
        "8402": {
            "args": [],
            "code": "\n\ndef extract_MRZ(context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\timport json\n\timport re\n\t\n\t# Split the document text by newline characters\n\ttext_split = context['document_text'].split(\"\\n\")\n\t\n\t# Filter lines containing the filler character '<' and with a length of at least 44 characters\n\tfiller_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\")[:44] for x in text_split if \"<\" in x and len(x.replace(\" \", \"\")) >= 44]\n\t))\n\t\n\t# Filter lines with exactly 44 characters after removing spaces\n\tnum_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\") for x in text_split if len(x.replace(\" \", \"\")) == 44]\n\t))\n\t\n\t# Initialize MRZ string\n\tmrz_str = \"\"\n\t\n\t# Check conditions to assign MRZ string\n\tif len(filler_char_filter) == 2:\n\t    mrz_str = \"\".join(filler_char_filter)\n\telif len(num_char_filter) == 2:\n\t    mrz_str = \"\".join(num_char_filter)\n\telse:\n\t    mrz_str = \"Unable to read MRZ\"\n\t\n\t# Return the desired output\n\treturn mrz_str\n\t",
            "docstring": null,
            "function_code": "\t# Import Python packages\n\timport json\n\timport re\n\t\n\t# Split the document text by newline characters\n\ttext_split = context['document_text'].split(\"\\n\")\n\t\n\t# Filter lines containing the filler character '<' and with a length of at least 44 characters\n\tfiller_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\")[:44] for x in text_split if \"<\" in x and len(x.replace(\" \", \"\")) >= 44]\n\t))\n\t\n\t# Filter lines with exactly 44 characters after removing spaces\n\tnum_char_filter = list(dict.fromkeys(\n\t    [x.replace(\" \", \"\") for x in text_split if len(x.replace(\" \", \"\")) == 44]\n\t))\n\t\n\t# Initialize MRZ string\n\tmrz_str = \"\"\n\t\n\t# Check conditions to assign MRZ string\n\tif len(filler_char_filter) == 2:\n\t    mrz_str = \"\".join(filler_char_filter)\n\telif len(num_char_filter) == 2:\n\t    mrz_str = \"\".join(num_char_filter)\n\telse:\n\t    mrz_str = \"Unable to read MRZ\"\n\t\n\t# Return the desired output\n\treturn mrz_str\n\t",
            "id": 8402,
            "lambda_udf_id": "v1:AWS_LAMBDA:8369632445:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/1b6f4049-2191-4fd7-8594-deca8db211a2_output.json",
            "name": "extract_MRZ",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/1b6f4049-2191-4fd7-8594-deca8db211a2.json",
            "type": "REFINER"
        },
        "8403": {
            "args": [
                {
                    "data_type": "LINE",
                    "name": "previous_line",
                    "value": "Date Of Issue@0"
                }
            ],
            "code": "\n\ndef remove_unwanted_chars(previous_line, context = {}, keys = {}, **kwargs):\n\tif previous_line:\n\t  previous_line = previous_line.lower()\n\t  previous_line = previous_line.replace(\"date\",\"\").replace(\"of\",\"\").replace(\"issue\",\"\").replace(\".\",\" \")\n\t  return previous_line.upper()\n\telse:\n\t  return 'N/A'",
            "docstring": null,
            "function_code": "\tif previous_line:\n\t  previous_line = previous_line.lower()\n\t  previous_line = previous_line.replace(\"date\",\"\").replace(\"of\",\"\").replace(\"issue\",\"\").replace(\".\",\" \")\n\t  return previous_line.upper()\n\telse:\n\t  return 'N/A'",
            "id": 8403,
            "lambda_udf_id": "v1:AWS_LAMBDA:8988432900:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/8812fcc5-aa68-405e-b108-4cf5ac99e07c_output.json",
            "name": "remove_unwanted_chars",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/8812fcc5-aa68-405e-b108-4cf5ac99e07c.json",
            "type": "REFINER"
        },
        "8404": {
            "args": [
                {
                    "data_type": "LINE",
                    "name": "previous_line",
                    "value": "Date Of Expiry@0"
                }
            ],
            "code": "\n\ndef remove_unwanted_chars(previous_line, context = {}, keys = {}, **kwargs):\n\tif previous_line:\n\t  return previous_line.replace(\".\",\" \").lower()\n\telse:\n\t  return 'N/A'",
            "docstring": null,
            "function_code": "\tif previous_line:\n\t  return previous_line.replace(\".\",\" \").lower()\n\telse:\n\t  return 'N/A'",
            "id": 8404,
            "lambda_udf_id": "v1:AWS_LAMBDA:1143505038:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/d102c20d-83b7-4604-9aa3-74c7c35877b7_output.json",
            "name": "remove_unwanted_chars",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/d102c20d-83b7-4604-9aa3-74c7c35877b7.json",
            "type": "REFINER"
        },
        "8405": {
            "args": [
                {
                    "data_type": "LINE",
                    "name": "previous_line",
                    "value": "Place Of Birth@0"
                }
            ],
            "code": "\n\ndef format_result(previous_line, context = {}, keys = {}, **kwargs):\n\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
            "docstring": null,
            "function_code": "\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
            "id": 8405,
            "lambda_udf_id": "v1:AWS_LAMBDA:1499318114:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/4e7773ec-936d-4abd-bbe2-7ef7fadce948_output.json",
            "name": "format_result",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/4e7773ec-936d-4abd-bbe2-7ef7fadce948.json",
            "type": "REFINER"
        },
        "8406": {
            "args": [
                {
                    "data_type": "LINE",
                    "name": "previous_line",
                    "value": "Issuing Authority@0"
                }
            ],
            "code": "\n\ndef format_result(previous_line, context = {}, keys = {}, **kwargs):\n\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
            "docstring": null,
            "function_code": "\tif previous_line.strip() == \"\":\n\t  return 'N/A'\n\telse:\n\t  previous_line =  previous_line.strip()\n\t  if ' ' in previous_line:\n\t    ls = previous_line.split()\n\t    return ' '.join(ls)\n\t  return previous_line",
            "id": 8406,
            "lambda_udf_id": "v1:AWS_LAMBDA:2127087028:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/88807b21-4ba4-4c24-9e87-bd8740172e7c_output.json",
            "name": "format_result",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/REFINER/88807b21-4ba4-4c24-9e87-bd8740172e7c.json",
            "type": "REFINER"
        },
        "8407": {
            "args": [
                {
                    "data_type": "FIELD",
                    "name": "MRZ",
                    "value": "MRZ"
                }
            ],
            "code": "\n\ndef validate_MRZ(MRZ, context = {}, keys = {}, **kwargs):\n\t\n\tif len(MRZ) == 88:\n\t\t\treturn None\n\telse:\n\t\t\treturn \"Error: Wrong MRZ\"",
            "docstring": null,
            "function_code": "\t\n\tif len(MRZ) == 88:\n\t\t\treturn None\n\telse:\n\t\t\treturn \"Error: Wrong MRZ\"",
            "id": 8407,
            "lambda_udf_id": "v1:AWS_LAMBDA:2253839819:insaprd-use2-aihub-prd-docker-default-udf:10",
            "most_recent_results_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/VALIDATIONS/a2a05c1e-2640-44d8-ae97-be471d7e6274_output.json",
            "name": "validate_MRZ",
            "project_uuid": "01961aef-c063-717c-999c-98e956d8bff2",
            "return_type": "string",
            "scripts_full_path": "ib-internal/varun_nandan/fs/Instabase Drive/aihub/01961aef-c063-717c-999c-98e956d8bff2/project/modules/scripts/VALIDATIONS/a2a05c1e-2640-44d8-ae97-be471d7e6274.json",
            "type": "VALIDATIONS"
        }
    },
    "project_validations": [
        {
            "affected_fields": [
                529467
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9587,
            "input_fields": [
                529467
            ],
            "name": "Rule 1",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529472
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9588,
            "input_fields": [
                529472
            ],
            "name": "Rule 10",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529473
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9589,
            "input_fields": [
                529473
            ],
            "name": "Rule 11",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529474
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9590,
            "input_fields": [
                529474
            ],
            "name": "Rule 12",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529475
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9591,
            "input_fields": [
                529475
            ],
            "name": "Rule 13",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529469
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9592,
            "input_fields": [
                529469
            ],
            "name": "Rule 2",
            "params": {
                "confidence_threshold": 0.9
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529463
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9593,
            "input_fields": [
                529463
            ],
            "name": "Rule 3",
            "params": {
                "confidence_threshold": 0.8
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529464
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9594,
            "input_fields": [
                529464
            ],
            "name": "Rule 4",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529465
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9595,
            "input_fields": [
                529465
            ],
            "name": "Rule 5",
            "params": {
                "confidence_threshold": 0.9
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529468
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9596,
            "input_fields": [
                529468
            ],
            "name": "Rule 6",
            "params": {
                "confidence_threshold": 0.9
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529466
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9597,
            "input_fields": [
                529466
            ],
            "name": "Rule 7",
            "params": {
                "confidence_threshold": 0.85
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529470
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208646000,
            "description": "",
            "id": 9598,
            "input_fields": [
                529470
            ],
            "name": "Rule 8",
            "params": {
                "confidence_threshold": 0.95
            },
            "scope": "FIELD",
            "type": "CONFIDENCE",
            "updated_at": 1744208646000
        },
        {
            "affected_fields": [
                529471
            ],
            "alert_level": "FAILURE",
            "created_at": 1744208647000,
            "description": "",
            "id": 9599,
            "input_fields": [
                529471
            ],
            "name": "Rule 9",
            "params": {
                "udf_id": 8407
            },
            "scope": "FIELD",
            "type": "UDF",
            "updated_at": 1744208647000
        }
    ],
    "reader_profile": {
        "createdBy": "",
        "createdOn": 1712147194154,
        "defaultProfile": "",
        "foundationVersion": "",
        "inputPath": null,
        "lastModifiedBy": "",
        "lastModifiedOn": 1712147194154,
        "outputPath": null,
        "profiles": [
            {
                "entitySettings": [],
                "name": "aihub",
                "readSettings": {
                    "cache_pdf_results": false,
                    "correct_inversion": false,
                    "correct_orientation": false,
                    "correct_resolution": false,
                    "correct_resolution_auto": false,
                    "detect_barcodes": false,
                    "detect_blurry_files": false,
                    "dewarp_page": true,
                    "document_mapping": "document_is_record_skip_empty_page",
                    "enable_ibdoc_v2": true,
                    "encryption_config": null,
                    "entity_models": [
                        {
                            "model_name": "signature_model",
                            "model_version": "0.0.4"
                        },
                        {
                            "model_name": "barcode_qrcode_detection",
                            "model_version": "1.0.0"
                        }
                    ],
                    "extract_all_pdf_layers": true,
                    "find_lines": false,
                    "fonts": null,
                    "force_image_ocr": false,
                    "image_filters": null,
                    "languages": null,
                    "layout_algorithm": "layout_algo_spatial",
                    "model_specific_settings": {
                        "marx_v1": {
                            "version": "v3"
                        }
                    },
                    "ocr_page_type": "marx",
                    "ocr_timeout": null,
                    "output_format_layout": "layout_per_page",
                    "output_formats": null,
                    "page_range_str": "",
                    "process_type": "auto_to_txt",
                    "produce_metadata_list": true,
                    "produce_word_metadata": true,
                    "remove_boxes": false,
                    "remove_boxes_over_height_percent": null,
                    "remove_boxes_over_width_percent": null,
                    "remove_space_wordpolys": true,
                    "remove_vertical_text": false,
                    "reorient_words": false,
                    "repair_pdfs": false,
                    "scripts_dir": "",
                    "write_converted_image": true,
                    "write_thumbnail": true
                }
            }
        ],
        "schema": "1"
    }
}